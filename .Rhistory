library(tidyverse)
library(lubridate)
library(janitor) # install.packages("janitor")
source("func/fAddEnviro.R")
library(tidyverse)
library(lubridate)
library(patchwork)
source("/Users/jason/GitHub/IMOS_Toolbox/fIMOS_MatchMODIS.R")
source("/Users/jason/GitHub/IMOS_Toolbox/fIMOS_MatchAltimetry.R")
# If on Windows you will need to install a development
# version of ncdf4 which allows the use of OpenDAP
if(.Platform$OS.type == "windows") {
warning("It looks like you are on a Windows PC - You will need to install a
development version of ncdf4 which allows the use of OpenDAP. Please
run devtools::install_github('mdsumner/ncdf4') to install or
see 'https://github.com/mdsumner/ncdf4' for more information.")
}
# install.packages("devtools")
# devtools::install_github("mdsumner/ncdf4")
# Get the latitude/longitude and date from the file
raw <- read_csv("SS2004_SeaSoarData.csv")
summary <- raw %>%
mutate(Date = dmy_hms(datestr),
site = case_when(str_detect(File,"SS0408_023") ~ "CapeByron",
str_detect(File,"SS0408_021") ~ "EvansHead",
str_detect(File,"SS0408_010") ~ "NorthSolitary",
str_detect(File,"SS0408_008") ~ "DiamondHead"),
site = as.factor(site)) %>%
group_by(site) %>%
summarise(Lat = Lat[1],
Lon = max(Lon),
Date = min(Date)) %>%
mutate(rot_angle = case_when(site == "CapeByron" ~ -356,
site == "NorthSolitary" ~ -15,
site == "EvansHead" ~ -13,
site == "DiamondHead" ~ -19))
sites <- levels(summary$site)
sites <- sites[c(1,3,4,2)]
# library(IDPmisc) #Package to get rid of NANs and Inf values-use NaRV.omit(dataframe)
library(tidyverse)
library(effects)
library(visreg)
library(GGally)
source("fHarmonic.R")
library(Rcpp)
sourceCpp("sum_ZooMSSC.cpp")
# Choose environmental data to use
enviro_data <- readRDS("enviro5d.RDS") # full set of 5x5 degree grids
setwd("~/Dropbox/Multi-Zoo Size Spectrum Model/_LatestModel/ModelCode/Working_3D")
# Choose environmental data to use
enviro_data <- readRDS("enviro5d.RDS") # full set of 5x5 degree grids
# Choose environmental data to use
enviro_data <- readRDS("envirofull_20200209.RDS") # full set of 5x5 degree grids
?quantile
quantile(enviro_data$chlo, c(0.25, 0.75))
quantile(enviro_data$chlo, c(0.2, 0.8))
quantile(enviro_data$chlo, c(0.1, 0.9))
## An extension of the model published in Heneghan et al., (2016):
## Models multiple zooplankton functional groups, and three fish groups
## This code is to run the model across multiple cores
##
## Jason's version for UNSWs Katana
##
## Updated Friday 31st January 2020
source("fZooMSS_Model.R") #source the model code
# Choose environmental data to use
# enviro_data <- readRDS("enviro5d.RDS") # full set of 5x5 degree grids
enviro_data <- readRDS("enviro200_20200209.RDS") # 200 square subset used for testing
enviro_data$tmaxx <- 10 # Set length of simulation (years)
#job specifics
Groups <- read.csv("TestGroups.csv") # Load in functional group information
# Should the filter feeder groups (salps/larv) have fixed PPMR?
# TRUE(default - for most runs) = YES,
# FALSE = NO (Use for PPMR=100 and PPMR=1000 runs).
fixed_filterPPMR <- TRUE
jobname <- 'DATE_JOB.NAME' #job name used on queue
ID <- as.integer(Sys.getenv('PBS_ARRAY_INDEX')) # Get the array run number
ID <- 1 # Test Run
ID_char <- sprintf("%04d",ID) # Set the ID as a 4 digit character so it will sort properly
system.time(
out_3d <- ZooMSS(enviro_data$sst[ID], enviro_data$chlo[ID],
enviro_data$a[ID], enviro_data$b[ID],
enviro_data$phyto_max[ID], enviro_data$dt[ID],
enviro_data$tmaxx[ID], fixed_filterPPMR)
)
# saveRDS(out, file = paste0("RawOutput/", jobname, "_", ID_char,".RDS"))
# system elapsed
# 6.508   1.289   7.713 # 3D with colSums(aperm())
# 11.707   1.222  11.706 # 3D
# 21.917   3.778  25.774 # 4D
## An extension of the model published in Heneghan et al., (2016):
## Models multiple zooplankton functional groups, and three fish groups
## This code is to run the model across multiple cores
##
## Jason's version for UNSWs Katana
##
## Updated Friday 31st January 2020
source("fZooMSS_Model.R") #source the model code
# Choose environmental data to use
# enviro_data <- readRDS("enviro5d.RDS") # full set of 5x5 degree grids
enviro_data <- readRDS("enviro200_20200209.RDS") # 200 square subset used for testing
enviro_data$tmaxx <- 10 # Set length of simulation (years)
#job specifics
Groups <- read.csv("TestGroups.csv") # Load in functional group information
# Should the filter feeder groups (salps/larv) have fixed PPMR?
# TRUE(default - for most runs) = YES,
# FALSE = NO (Use for PPMR=100 and PPMR=1000 runs).
fixed_filterPPMR <- TRUE
jobname <- 'DATE_JOB.NAME' #job name used on queue
ID <- as.integer(Sys.getenv('PBS_ARRAY_INDEX')) # Get the array run number
ID <- 1 # Test Run
ID_char <- sprintf("%04d",ID) # Set the ID as a 4 digit character so it will sort properly
system.time(
out_3d <- ZooMSS(enviro_data$sst[ID], enviro_data$chlo[ID],
enviro_data$a[ID], enviro_data$b[ID],
enviro_data$phyto_max[ID], enviro_data$dt[ID],
enviro_data$tmaxx[ID], fixed_filterPPMR)
)
# saveRDS(out, file = paste0("RawOutput/", jobname, "_", ID_char,".RDS"))
# system elapsed
# 6.508   1.289   7.713 # 3D with colSums(aperm())
# 11.707   1.222  11.706 # 3D
# 21.917   3.778  25.774 # 4D
setwd("~/Dropbox/Multi-Zoo Size Spectrum Model/_LatestModel/ModelCode/OperationalCode")
## An extension of the model published in Heneghan et al., (2016):
## Models multiple zooplankton functional groups, and three fish groups
## This code is to run the model across multiple cores
##
## Updated Friday 31st January 2020
source("fZooMSS_Model.R") #source the model code
# Choose environmental data to use
enviro_data <- readRDS("envirofull_20200312.RDS")
enviro_data$tmaxx <- 10 # Set length of simulation (years)
#job specifics
Groups <- read.csv("TestGroups.csv") # Load in functional group information
# Should the filter feeder groups (salps/larv) have fixed PPMR?
# TRUE(default - for most runs) = YES,
# FALSE = NO (Use for PPMR=100 and PPMR=1000 runs).
fixed_filterPPMR <- TRUE
jobname <- 'DATE_JOB.NAME' #job name used on queue
ID <- as.integer(Sys.getenv('PBS_ARRAY_INDEX')) # Get the array run number\
ID_char <- sprintf("%04d",ID) # Set the ID as a 4 digit character so it will sort properly
ID <- 1 # Test Run
system.time(
out <- ZooMSS(enviro_data$sst[ID], enviro_data$chlo[ID],
enviro_data$a[ID], enviro_data$b[ID],
enviro_data$phyto_max[ID], enviro_data$dt[ID],
enviro_data$tmaxx[ID], fixed_filterPPMR)
)
# saveRDS(out, file = paste0("RawOutput/", jobname, "_", ID_char,".RDS"))
identical(out, out_3d)
identical(out$abundances, out_3d$abundances)
identical(round(out$abundances,3), round(out_3d$abundances,3))
a <- out$abundances
a[1:5,1:5]
a3d <- out_3d$abundances
a3d[1:5,1:5]
setwd("~/Dropbox/Multi-Zoo Size Spectrum Model/_LatestModel/ModelCode/Working_3D")
source("fZooMSS_Model.R") #source the model code
# Choose environmental data to use
# enviro_data <- readRDS("enviro5d.RDS") # full set of 5x5 degree grids
enviro_data <- readRDS("enviro200_20200209.RDS") # 200 square subset used for testing
enviro_data$tmaxx <- 10 # Set length of simulation (years)
#job specifics
Groups <- read.csv("TestGroups.csv") # Load in functional group information
# Should the filter feeder groups (salps/larv) have fixed PPMR?
# TRUE(default - for most runs) = YES,
# FALSE = NO (Use for PPMR=100 and PPMR=1000 runs).
fixed_filterPPMR <- TRUE
jobname <- 'DATE_JOB.NAME' #job name used on queue
ID <- as.integer(Sys.getenv('PBS_ARRAY_INDEX')) # Get the array run number
ID <- 1 # Test Run
system.time(
out_3d <- ZooMSS(enviro_data$sst[ID], enviro_data$chlo[ID],
enviro_data$a[ID], enviro_data$b[ID],
enviro_data$phyto_max[ID], enviro_data$dt[ID],
enviro_data$tmaxx[ID], fixed_filterPPMR)
)
gg <- model$ingested_phyto + apply(sweep(model$dynam_growthkernel, 3, growth_multiplier, '*'), c(1,2), sum)
sw <- sweep(model$dynam_growthkernel, 3, growth_multiplier, '*')
ap <- colSums(aperm(sw, c(3,1,2)))
gg <- model$ingested_phyto + ap
sw2 <- sweep(model$dynam_mortkernel, c(2,3), predation_multiplier, '*')
M2 <- colSums(colSums(aperm(sw2, c(2,3,1))))
M2Ryan <- apply(sweep(model$dynam_mortkernel, c(2,3), predation_multiplier, '*'), 1, sum)
sw <- sweep(model$dynam_growthkernel, 3, growth_multiplier, '*')
ap <- colSums(aperm(sw, c(3,1,2)))
gg <- model$ingested_phyto + ap
ggRyan <- model$ingested_phyto + apply(sweep(model$dynam_growthkernel, 3, growth_multiplier, '*'), c(1,2), sum)
source('~/Dropbox/Multi-Zoo Size Spectrum Model/_LatestModel/ModelCode/Working_3D/fZooMSS_Project.R', echo=TRUE)
sw <- sweep(model$dynam_growthkernel, 3, growth_multiplier, '*')
ap <- colSums(aperm(sw, c(3,1,2)))
gg <- model$ingested_phyto + ap
ggRyan <- model$ingested_phyto + apply(sweep(model$dynam_growthkernel, 3, growth_multiplier, '*'), c(1,2), sum)
sw2 <- sweep(model$dynam_mortkernel, c(2,3), predation_multiplier, '*')
M2 <- colSums(colSums(aperm(sw2, c(2,3,1))))
M2Ryan <- apply(sweep(model$dynam_mortkernel, c(2,3), predation_multiplier, '*'), 1, sum)
identical(gg,ggRyan)
identical(M2,M2Ryan)
M2
identical(round(M2,2),round(M2Ryan,2))
# Total dynamic spectrum mortality
Z = sweep(model$M_sb  + model$fish_mort, 2, M2, '+')
diffRyan <- (model$diff_phyto + apply(sweep(model$dynam_diffkernel, 3, diffusion_multiplier, '*'), c(1,2), sum))
# Total dynamic spectrum mortality
### RFH - Can't M_sb + fish_mort be done in the model setup?
Z <- sweep(model$M_sb + model$fish_mort, 2, M2, '+')
sw <- sweep(model$dynam_diffkernel, 3, diffusion_multiplier, '*')
ap <- colSums(aperm(sw, c(3,1,2)))
diff <- model$diff_phyto + ap
identical(diff, diffRyan)
## An extension of the model published in Heneghan et al., (2016):
## Models multiple zooplankton functional groups, and three fish groups
## This code is to run the model across multiple cores
##
## Jason's version for UNSWs Katana
##
## Updated Friday 31st January 2020
source("fZooMSS_Model.R") #source the model code
# Choose environmental data to use
# enviro_data <- readRDS("enviro5d.RDS") # full set of 5x5 degree grids
enviro_data <- readRDS("envirofull_20200312.RDS") # 200 square subset used for testing
enviro_data$tmaxx <- 10 # Set length of simulation (years)
#job specifics
Groups <- read.csv("TestGroups.csv") # Load in functional group information
# Should the filter feeder groups (salps/larv) have fixed PPMR?
# TRUE(default - for most runs) = YES,
# FALSE = NO (Use for PPMR=100 and PPMR=1000 runs).
fixed_filterPPMR <- TRUE
jobname <- 'DATE_JOB.NAME' #job name used on queue
ID <- as.integer(Sys.getenv('PBS_ARRAY_INDEX')) # Get the array run number
ID <- 1 # Test Run
ID_char <- sprintf("%04d",ID) # Set the ID as a 4 digit character so it will sort properly
system.time(
out_3d <- ZooMSS(enviro_data$sst[ID], enviro_data$chlo[ID],
enviro_data$a[ID], enviro_data$b[ID],
enviro_data$phyto_max[ID], enviro_data$dt[ID],
enviro_data$tmaxx[ID], fixed_filterPPMR)
)
# saveRDS(out, file = paste0("RawOutput/", jobname, "_", ID_char,".RDS"))
# system elapsed
# 6.508   1.289   7.713 # 3D with colSums(aperm())
# 11.707   1.222  11.706 # 3D
# 21.917   3.778  25.774 # 4D
## An extension of the model published in Heneghan et al., (2016):
## Models multiple zooplankton functional groups, and three fish groups
## This code is to run the model across multiple cores
##
## Jason's version for UNSWs Katana
##
## Updated Friday 31st January 2020
source("fZooMSS_Model.R") #source the model code
# Choose environmental data to use
# enviro_data <- readRDS("enviro5d.RDS") # full set of 5x5 degree grids
enviro_data <- readRDS("envirofull_20200312.RDS") # 200 square subset used for testing
enviro_data$tmaxx <- 10 # Set length of simulation (years)
#job specifics
Groups <- read.csv("TestGroups.csv") # Load in functional group information
# Should the filter feeder groups (salps/larv) have fixed PPMR?
# TRUE(default - for most runs) = YES,
# FALSE = NO (Use for PPMR=100 and PPMR=1000 runs).
fixed_filterPPMR <- TRUE
jobname <- 'DATE_JOB.NAME' #job name used on queue
ID <- as.integer(Sys.getenv('PBS_ARRAY_INDEX')) # Get the array run number
ID <- 1 # Test Run
ID_char <- sprintf("%04d",ID) # Set the ID as a 4 digit character so it will sort properly
system.time(
out_3d <- ZooMSS(enviro_data$sst[ID], enviro_data$chlo[ID],
enviro_data$a[ID], enviro_data$b[ID],
enviro_data$phyto_max[ID], enviro_data$dt[ID],
enviro_data$tmaxx[ID], fixed_filterPPMR)
)
# saveRDS(out, file = paste0("RawOutput/", jobname, "_", ID_char,".RDS"))
# system elapsed
# 6.508   1.289   7.713 # 3D with colSums(aperm())
# 11.707   1.222  11.706 # 3D
# 21.917   3.778  25.774 # 4D
## An extension of the model published in Heneghan et al., (2016):
## Models multiple zooplankton functional groups, and three fish groups
## This code is to run the model across multiple cores
##
## Jason's version for UNSWs Katana
##
## Updated Friday 31st January 2020
source("fZooMSS_Model.R") #source the model code
# Choose environmental data to use
# enviro_data <- readRDS("enviro5d.RDS") # full set of 5x5 degree grids
enviro_data <- readRDS("envirofull_20200312.RDS") # 200 square subset used for testing
enviro_data$tmaxx <- 10 # Set length of simulation (years)
#job specifics
Groups <- read.csv("TestGroups.csv") # Load in functional group information
# Should the filter feeder groups (salps/larv) have fixed PPMR?
# TRUE(default - for most runs) = YES,
# FALSE = NO (Use for PPMR=100 and PPMR=1000 runs).
fixed_filterPPMR <- TRUE
jobname <- 'DATE_JOB.NAME' #job name used on queue
ID <- as.integer(Sys.getenv('PBS_ARRAY_INDEX')) # Get the array run number
ID <- 1 # Test Run
ID_char <- sprintf("%04d",ID) # Set the ID as a 4 digit character so it will sort properly
system.time(
out_3d <- ZooMSS(enviro_data$sst[ID], enviro_data$chlo[ID],
enviro_data$a[ID], enviro_data$b[ID],
enviro_data$phyto_max[ID], enviro_data$dt[ID],
enviro_data$tmaxx[ID], fixed_filterPPMR)
)
# saveRDS(out, file = paste0("RawOutput/", jobname, "_", ID_char,".RDS"))
# system elapsed
# 6.508   1.289   7.713 # 3D with colSums(aperm())
# 11.707   1.222  11.706 # 3D
# 21.917   3.778  25.774 # 4D
## An extension of the model published in Heneghan et al., (2016):
## Models multiple zooplankton functional groups, and three fish groups
## This code is to run the model across multiple cores
##
## Updated Friday 31st January 2020
source("fZooMSS_Model.R") #source the model code
# Choose environmental data to use
enviro_data <- readRDS("envirofull_20200312.RDS")
enviro_data$tmaxx <- 10 # Set length of simulation (years)
#job specifics
Groups <- read.csv("TestGroups.csv") # Load in functional group information
# Should the filter feeder groups (salps/larv) have fixed PPMR?
# TRUE(default - for most runs) = YES,
# FALSE = NO (Use for PPMR=100 and PPMR=1000 runs).
fixed_filterPPMR <- TRUE
jobname <- 'DATE_JOB.NAME' #job name used on queue
ID <- as.integer(Sys.getenv('PBS_ARRAY_INDEX')) # Get the array run number\
ID_char <- sprintf("%04d",ID) # Set the ID as a 4 digit character so it will sort properly
ID <- 1 # Test Run
system.time(
out <- ZooMSS(enviro_data$sst[ID], enviro_data$chlo[ID],
enviro_data$a[ID], enviro_data$b[ID],
enviro_data$phyto_max[ID], enviro_data$dt[ID],
enviro_data$tmaxx[ID], fixed_filterPPMR)
)
# saveRDS(out, file = paste0("RawOutput/", jobname, "_", ID_char,".RDS"))
identical(out$abundances, out_3d$abundances)
