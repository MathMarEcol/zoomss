[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 zoomss authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/zoomss.html","id":"input-data","dir":"Articles","previous_headings":"","what":"Input Data","title":"Getting started with ZooMSS","text":"ZooMSS requires two sets input data: Groups - Contains taxa-specific parameter values model group, including size ranges functional group properties. Environmental data - Time-series dataframe time series environmental conditions time, sst, chl columns.","code":""},{"path":"/articles/zoomss.html","id":"running-the-default-model","dir":"Articles","previous_headings":"","what":"Running the default Model","title":"Getting started with ZooMSS","text":"Get default published Groups dataframe using: Now create environmental data time-series using helper function. time-series uses constant sea surface temperature (sst) chlorophyll (chl) 0.1 yr-1 timestep (dt). can look environment data check everything ok :  Now run ZooMSS save every isave timestep reduce storage requirements.","code":"Groups <- getGroups() #> Using default ZooMSS functional groups. Use getGroups() to customize. env_data <- createInputParams(time = seq(0, 100, by = 0.1) ,                               sst = 15,                               chl = 0.15) #> ZooMSS input parameters created: #> - Time points: 1001 (time values provided) #> - Time steps: 1000 (intervals to simulate) #> - Time range: 0 to 100 years #> - dt = 0.1 years #> - SST range: 15 to 15 deg C #> - Chlorophyll range: 0.15 to 0.15 mg/m^3 plotEnvironment(env_data) mdl <- zoomss_model(input_params = env_data, Groups = Groups, isave = 2) #> Functional groups validation passed #> Calculating phytoplankton parameters from environmental time series"},{"path":"/articles/zoomss.html","id":"plotting","dir":"Articles","previous_headings":"","what":"Plotting","title":"Getting started with ZooMSS","text":"model includes several built-plotting functions analysis visualization.","code":""},{"path":"/articles/zoomss.html","id":"time-series-analysis","dir":"Articles","previous_headings":"Plotting","what":"Time Series Analysis","title":"Getting started with ZooMSS","text":"plots display total abundance mean growth/mortality across size classes time.  can also plot total biomass time.","code":"library(patchwork) p1 <- plotTimeSeries(mdl, by = \"abundance\", transform = \"log10\") # Plot abundance time series p2 <- plotTimeSeries(mdl, by = \"growth\") # Plot growth rate time series p3 <- plotTimeSeries(mdl, by = \"mortality\") # Plot predation mortality time series  wrap_plots(p1, p2, p3, nrow = 3, guides = \"collect\") p4 <- plotTimeSeries(mdl, by = \"biomass\", transform = \"log10\") + theme(legend.position = \"none\") # Plot biomass  p5 <- plotTimeSeries(mdl, by = \"biomass\", type = \"stack\", transform = \"log10\") # Plot stacked biomass  p6 <- plotTimeSeries(mdl, by = \"biomass\", type = \"fill\") # Plot proportional stacked biomass   wrap_plots(p4, p5, p6, nrow = 3, guides = \"collect\")"},{"path":"/articles/zoomss.html","id":"static-plots-for-a-given-model-time-point","dir":"Articles","previous_headings":"Plotting","what":"Static Plots for a given model time point","title":"Getting started with ZooMSS","text":"Plot mean species-resolved size spectra final n_years.  Plot predator-prey mass ratios idx timestep","code":"plotSizeSpectra(mdl, n_years = 10) #> Averaging final 10 years (50 saved time steps with isave = 2) of abundance from 500 total saved time steps. plotPPMR(mdl, idx = 500) # Plot final timestep"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jason D. Everett. Author, maintainer. Ryan F. Heneghan. Author. Kieran Murphy. Author. Anthony J. Richardson. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Everett J, Heneghan R, Murphy K, Richardson (2025). zoomss: Zooplankton Model Size Spectra. R package version 0.1.0, https://github.com/MathMarEcol/zoomss.","code":"@Manual{,   title = {zoomss: Zooplankton Model of Size Spectra},   author = {Jason D. Everett and Ryan F. Heneghan and Kieran Murphy and Anthony J. Richardson},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/MathMarEcol/zoomss}, }"},{"path":[]},{"path":"/index.html","id":"overview-of-zoomss","dir":"","previous_headings":"","what":"Overview of ZooMSS","title":"Zooplankton Model of Size Spectra","text":"Zooplankton Model Size Spectra (ZooMSS) functional size-spectrum model marine ecosystem (following Heneghan et al. 2016) resolve phytoplankton, nine zooplankton functional groups (heterotrophic flagellates ciliates, omnivorous carnivorous copepods, larvaceans, euphausiids, salps, chaetognaths jellyfish) three size-based fish groups. Zooplankton functional groups resolved using body-size ranges, size-based feeding characteristics carbon content, zooplankton community emerges model across global environmental gradients, depending functional traits different groups. developed Zooplankton Model Size Spectra ZooMSS based prototype Heneghan et al. (2016). ZooMSS uses functional size-spectrum framework (Blanchard et al., 2017) resolve body size ranges, size-based feeding characteristics carbon content nine zooplankton groups three fish groups. model supports time-varying environmental conditions enabling studies seasonal cycles, climate change scenarios, ecosystem responses environmental variability. ZooMSS represents marine ecosystem three communities: phytoplankton, zooplankton fish. zooplankton community consists nine abundant zooplankton groups, fish community made small, medium large group. Dynamics phytoplankton explicitly resolved model, rather mean size structure phytoplankton community estimated directly satellite chlorophyll observations (Brewin et al., 2010; Barnes et al., 2011; Hirata et al., 2011). Abundances zooplankton fish communities driven size-dependent processes growth mortality, temporal dynamics functional group governed separate second-order McKendrick-von Foerster equations.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Zooplankton Model of Size Spectra","text":"can install development version zoomss GitHub :","code":"# install.packages(\"pak\") pak::pak(\"MathMarEcol/zoomss\")"},{"path":"/index.html","id":"publications","dir":"","previous_headings":"","what":"Publications","title":"Zooplankton Model of Size Spectra","text":"Heneghan, R.F., Everett, J.D., Blanchard, J.L., Richardson, .J., 2016. Zooplankton Fish: Improving Zooplankton Realism Size-Spectrum Models Mediates Energy Transfer Food Webs. Front. Mar. Sci. 3, 1–15. https://doi.org/10.3389/fmars.2016.00201 Heneghan, R.F., Everett, J.D., Sykes, P., Batten, S.D., Edwards, M., Takahashi, K., Suthers, .M., Blanchard, J.L., Richardson, .J., review, global size-spectrum model marine ecosystem resolves zooplankton composition. Ecological Modelling","code":""},{"path":"/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting Help","title":"Zooplankton Model of Size Spectra","text":"encounter problems running model, raise issue GitHub: https://github.com/MathMarEcol/ZoopSizeSpectraModel/issues find errors want improve model, ’d love make changes submit pull request us review approve.","code":""},{"path":"/reference/GroupInputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Default functional groups for the ZooMSS model — GroupInputs","title":"Default functional groups for the ZooMSS model — GroupInputs","text":"dataset containing biological parameters different functional groups used ZooMSS size-structured marine ecosystem model. represent various taxa flagellates large fish, defined feeding behavior, size ranges, physiological parameters.","code":""},{"path":"/reference/GroupInputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default functional groups for the ZooMSS model — GroupInputs","text":"","code":"GroupInputs"},{"path":"/reference/GroupInputs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Default functional groups for the ZooMSS model — GroupInputs","text":"data frame 12 rows (functional groups) 19 columns: Species Character. Name functional group/taxa Type Character. Broad category (Zooplankton Fish) FeedType Character. Feeding strategy (Heterotroph, FilterFeeder, Omnivore, Carnivore) Prop Numeric. Initial proportion total biomass W0 Numeric. Log10 minimum body weight (g) group Wmax Numeric. Log10 maximum body weight (g) group Wmat Numeric. Log10 maturation body weight (g) SearchCoef Numeric. Search coefficient predation interactions SearchExp Numeric. Search exponent predation scaling PPMRscale Numeric. Predator-prey mass ratio scaling parameter PPMR Numeric. Predator-prey mass ratio (fish groups) FeedWidth Numeric. Feeding kernel width parameter GrossGEscale Numeric. Gross growth efficiency scaling Carbon Numeric. Carbon content proportion Repro Numeric. Reproduction parameter Fmort Numeric. Fishing mortality rate Fmort_W0 Numeric. Log10 minimum weight fishing mortality Fmort_Wmax Numeric. Log10 maximum weight fishing mortality PlotColour Character. Color code plotting functional group","code":""},{"path":"/reference/GroupInputs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Default functional groups for the ZooMSS model — GroupInputs","text":"Marine ecological literature ZooMSS model development","code":""},{"path":"/reference/GroupInputs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default functional groups for the ZooMSS model — GroupInputs","text":"ZooMSS Functional Groups Data GroupInputs dataset defines 12 functional groups spanning small microzooplankton (flagellates, ciliates) various mesozooplankton groups (copepods, euphausiids, chaetognaths) gelatinous zooplankton (salps, jellyfish) three fish size classes (small, medium, large). group characterized : Size ranges: W0 Wmax define body size spectrum Feeding behavior: Different strategies resource acquisition Interaction parameters: Search rates predator-prey relationships Physiological rates: Growth efficiency carbon content parameters based marine ecological literature represent typical values temperate marine ecosystems.","code":""},{"path":"/reference/GroupInputs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default functional groups for the ZooMSS model — GroupInputs","text":"","code":"data(GroupInputs) head(GroupInputs) #> # A tibble: 6 × 19 #>   Species  Type  FeedType  Prop    W0  Wmax  Wmat SearchCoef SearchExp PPMRscale #>   <chr>    <chr> <chr>    <dbl> <dbl> <dbl> <dbl>      <dbl>     <dbl>     <dbl> #> 1 Flagell… Zoop… Heterot…  0.1  -12    -6.8  -8.8        640       0.8      1.5  #> 2 Ciliates Zoop… Heterot…  0.1   -9.3  -6.3  -8.3        640       0.8      0.04 #> 3 Larvace… Zoop… FilterF…  0.1   -6.4  -3.2  -5.2        640       0.8     -3    #> 4 OmniCop… Zoop… Omnivore  0.04  -7.5  -3.5  -5.5        640       0.8     -0.5  #> 5 CarnCop… Zoop… Carnivo…  0.06  -7.5  -2.5  -4.5        640       0.8      1.5  #> 6 Euphaus… Zoop… Omnivore  0.1   -4.2   0.2  -1.8        640       0.8     -2    #> # ℹ 9 more variables: PPMR <dbl>, FeedWidth <dbl>, GrossGEscale <dbl>, #> #   Carbon <dbl>, Repro <dbl>, Fmort <dbl>, Fmort_W0 <dbl>, Fmort_Wmax <dbl>, #> #   PlotColour <chr>  # View size ranges across groups plot(GroupInputs$W0, GroupInputs$Wmax,       col = GroupInputs$PlotColour,      xlab = \"Log10 Min Weight\", ylab = \"Log10 Max Weight\") text(GroupInputs$W0, GroupInputs$Wmax, GroupInputs$Species, pos = 3, cex = 0.7)"},{"path":"/reference/averageTimeSeries.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate mean of final portion of ZooMSS time series — averageTimeSeries","title":"Calculate mean of final portion of ZooMSS time series — averageTimeSeries","text":"Calculates mean final n years time series obtain equilibrium values model spin-period.","code":""},{"path":"/reference/averageTimeSeries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate mean of final portion of ZooMSS time series — averageTimeSeries","text":"","code":"averageTimeSeries(mdl, var, n_years = 10)"},{"path":"/reference/averageTimeSeries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate mean of final portion of ZooMSS time series — averageTimeSeries","text":"mdl ZooMSS model results object containing model parameters output arrays var Character string specifying variable extract average (e.g., \"N\", \"Growth\", \"Mort\") n_years Number years end time series average (default: 10)","code":""},{"path":"/reference/averageTimeSeries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate mean of final portion of ZooMSS time series — averageTimeSeries","text":"2D array averaged values (groups x size_classes)","code":""},{"path":"/reference/averageTimeSeries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate mean of final portion of ZooMSS time series — averageTimeSeries","text":"Calculate Average Output Model Time Series function removes initial transient period time series data calculates mean final n years, providing representative steady-state values. Essential obtaining equilibrium abundances, growth rates, model outputs model reached dynamic equilibrium.","code":""},{"path":"/reference/averageTimeSeries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate mean of final portion of ZooMSS time series — averageTimeSeries","text":"","code":"if (FALSE) { # \\dontrun{ # Run ZooMSS model results <- zoomss_model(input_params, Groups)  # Average final 3 years of abundance data avg_abundance <- averageTimeSeries(results, \"N\", n_years = 3)  # Average final 10 years of growth data (default) avg_growth <- averageTimeSeries(results, \"gg\") } # }"},{"path":"/reference/calculatePhytoParam.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate phytoplankton abundance spectrum from chlorophyll data — calculatePhytoParam","title":"Calculate phytoplankton abundance spectrum from chlorophyll data — calculatePhytoParam","text":"Converts chlorophyll concentration data phytoplankton size spectrum parameters (slope, intercept, maximum size) using established oceanographic relationships.","code":""},{"path":"/reference/calculatePhytoParam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate phytoplankton abundance spectrum from chlorophyll data — calculatePhytoParam","text":"","code":"calculatePhytoParam(dat)"},{"path":"/reference/calculatePhytoParam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate phytoplankton abundance spectrum from chlorophyll data — calculatePhytoParam","text":"dat Data frame containing chlorophyll data (chl column mg/m^3) optionally phytoplankton biomass (phy column g/m^3)","code":""},{"path":"/reference/calculatePhytoParam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate phytoplankton abundance spectrum from chlorophyll data — calculatePhytoParam","text":"Data frame added columns: phyto_slope: Power law slope phytoplankton size spectrum phyto_int: Log10 intercept phytoplankton abundance phyto_max: Maximum phytoplankton size (log10 grams) pico_biom, nano_biom, micro_biom: Biomass size class","code":""},{"path":"/reference/calculatePhytoParam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate phytoplankton abundance spectrum from chlorophyll data — calculatePhytoParam","text":"Calculate Phytoplankton Size Spectrum Parameters function implements Brewin et al. (2015) algorithm partition chlorophyll among picophytoplankton, nanophytoplankton, microphytoplankton size classes, calculates: Size spectrum slope intercept parameters Maximum phytoplankton size based micro proportion Biomass estimates size class parameters drive dynamic phytoplankton spectrum ZooMSS serves base food web. function can work either chlorophyll-data (using empirical relationships) direct phytoplankton biomass measurements.","code":""},{"path":"/reference/calculatePhytoParam.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate phytoplankton abundance spectrum from chlorophyll data — calculatePhytoParam","text":"Brewin, R.J.W., et al. (2015). three-component model phytoplankton size class Atlantic Ocean. Ecological Modelling, 306, 90-101. Maranon, E., et al. (2014). Resource supply overrides temperature controlling factor marine phytoplankton growth. PLoS ONE, 9(6), e99312.","code":""},{"path":"/reference/createEnviroData.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate synthetic environmental data for ZooMSS testing — createEnviroData","title":"Generate synthetic environmental data for ZooMSS testing — createEnviroData","text":"Creates simple synthetic environmental time series optional seasonal variation testing ZooMSS model runs real environmental data available.","code":""},{"path":"/reference/createEnviroData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate synthetic environmental data for ZooMSS testing — createEnviroData","text":"","code":"createEnviroData(   n_years,   dt,   base_sst = 15,   base_chl = 0.5,   seasonal = TRUE,   sst_amplitude = 3,   chl_amplitude = 0.2 )"},{"path":"/reference/createEnviroData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate synthetic environmental data for ZooMSS testing — createEnviroData","text":"n_years Number years generate dt Time step size years base_sst Base sea surface temperature deg C (default: 15) base_chl Base chlorophyll concentration mg/m^3 (default: 0.5) seasonal Logical, whether add seasonal variation (default: TRUE) sst_amplitude Amplitude SST seasonal variations deg C (default: 3) chl_amplitude Amplitude chlorophyll seasonal variations mg/m^3 (default: 0.2)","code":""},{"path":"/reference/createEnviroData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate synthetic environmental data for ZooMSS testing — createEnviroData","text":"Data frame columns: time, sst, chl","code":""},{"path":"/reference/createEnviroData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate synthetic environmental data for ZooMSS testing — createEnviroData","text":"Create Environmental Time Series function generates synthetic sea surface temperature chlorophyll time series can used testing ZooMSS model behavior. function can create either static environmental conditions seasonal cycles sinusoidal variation. particularly useful : Testing model sensitivity environmental forcing Creating idealized scenarios model exploration Generating data real environmental data unavailable seasonal option creates SST chlorophyll cycles phase, mimicking typical ocean patterns chlorophyll peaks SST lower.","code":""},{"path":"/reference/createEnviroData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate synthetic environmental data for ZooMSS testing — createEnviroData","text":"","code":"# Create seasonal environmental data env_data <- createEnviroData(   n_years = 10,   dt = 0.01,   seasonal = TRUE )  # Create static environmental conditions static_data <- createEnviroData(   n_years = 5,   dt = 0.01,   seasonal = FALSE,   base_sst = 20,   base_chl = 1.0 )"},{"path":"/reference/createInputParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Create input parameters data frame for ZooMSS model runs — createInputParams","title":"Create input parameters data frame for ZooMSS model runs — createInputParams","text":"Creates properly formatted input parameters data frame ZooMSS model simulations, combining temporal parameters environmental time series data.","code":""},{"path":"/reference/createInputParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create input parameters data frame for ZooMSS model runs — createInputParams","text":"","code":"createInputParams(time, sst, chl, cellID = NULL)"},{"path":"/reference/createInputParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create input parameters data frame for ZooMSS model runs — createInputParams","text":"time Numeric vector time values years (must increasing uniform, can start value) sst Numeric vector sea surface temperature values deg C chl Numeric vector chlorophyll concentration values mg/m^3 cellID Optional numeric vector cell identifiers spatial data (default: NULL)","code":""},{"path":"/reference/createInputParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create input parameters data frame for ZooMSS model runs — createInputParams","text":"Data frame columns: time, time_step, sst, chl, cellID (provided)","code":""},{"path":"/reference/createInputParams.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create input parameters data frame for ZooMSS model runs — createInputParams","text":"Create ZooMSS Input Parameters Object function combines environmental time series (SST chlorophyll) time data create input_params object required zoomss_model(). function performs validation checks using assertthat ensure: input vectors numeric equal length SST values within reasonable ocean range (-2 35 deg C) Chlorophyll values positive within typical range (0 50 mg/m^3) Time values increasing reasonable","code":""},{"path":"/reference/createInputParams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create input parameters data frame for ZooMSS model runs — createInputParams","text":"","code":"if (FALSE) { # \\dontrun{ # Create simple environmental time series time_vec <- seq(0, 10, 0.01)  # 10 years with 0.01 year time steps sst_vec <- 15 + 3*sin(2*pi*time_vec/1)  # annual cycle chl_vec <- 0.5 + 0.2*cos(2*pi*time_vec/1)  # annual cycle  # Create input parameters object input_params <- createInputParams(time_vec, sst_vec, chl_vec)  # Use with ZooMSS model results <- zoomss_model(input_params, Groups, isave = 50) } # }"},{"path":"/reference/extractPPMR.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate predator-prey mass ratio data for visualization — extractPPMR","title":"Calculate predator-prey mass ratio data for visualization — extractPPMR","text":"Calculates predator-prey mass ratio (PPMR) values biomass weightings creating PPMR distribution plots ZooMSS analysis.","code":""},{"path":"/reference/extractPPMR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate predator-prey mass ratio data for visualization — extractPPMR","text":"","code":"extractPPMR(mdl)"},{"path":"/reference/extractPPMR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate predator-prey mass ratio data for visualization — extractPPMR","text":"mdl ZooMSS results object containing abundance data (N) model parameters","code":""},{"path":"/reference/extractPPMR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate predator-prey mass ratio data for visualization — extractPPMR","text":"2D input: List containing PPMR density data species-specific values plotting 3D input: Array first dimension time, containing PPMR results timestep","code":""},{"path":"/reference/extractPPMR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate predator-prey mass ratio data for visualization — extractPPMR","text":"Calculate PPMR Data Plotting function computes theoretical realized PPMR patterns : Calculating size-dependent PPMR values using Wirtz 2012 equations Weighting biomass show community-level patterns Computing species-specific PPMR values Handling special cases filter feeders (larvaceans, salps) Processing either time-averaged abundances (2D) full time series (3D) function dynamically determines size class ranges larvaceans salps based W0 Wmax values. 3D abundance arrays, calculates PPMR time step separately. helper function primarily used plotPPMR visualization. PPMR analysis provides insights food web structure predation patterns.","code":""},{"path":"/reference/extractSizeRange.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract specific size class range from model variable — extractSizeRange","title":"Extract specific size class range from model variable — extractSizeRange","text":"Subsets ZooMSS model output include specified size range, useful focusing analysis particular size ranges.","code":""},{"path":"/reference/extractSizeRange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract specific size class range from model variable — extractSizeRange","text":"","code":"extractSizeRange(mdl, var, min_size, max_size)"},{"path":"/reference/extractSizeRange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract specific size class range from model variable — extractSizeRange","text":"mdl ZooMSS model results object containing model parameters output arrays var Character string specifying variable extract (e.g., \"N\", \"Z\", \"Growth\") min_size Minimum size (log10 grams) extract max_size Maximum size (log10 grams) extract","code":""},{"path":"/reference/extractSizeRange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract specific size class range from model variable — extractSizeRange","text":"Array dimensions original variable subsetted size range","code":""},{"path":"/reference/extractSizeRange.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract specific size class range from model variable — extractSizeRange","text":"Extract Size Range ZooMSS Output function extracts subset size classes specified ZooMSS model variable. Useful analyzing specific size ranges (e.g., microzooplankton, mesozooplankton) excluding boundary effects model analysis. function converts log10 size values size class indices automatically.","code":""},{"path":"/reference/extractSizeRange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract specific size class range from model variable — extractSizeRange","text":"","code":"if (FALSE) { # \\dontrun{ # Run ZooMSS model results <- zoomss_model(input_params, Groups)  # Extract mesozooplankton size range from abundance data meso_abundance <- extractSizeRange(results, \"N\", min_size = -8, max_size = -5)  # Extract microzooplankton size range from growth data micro_growth <- extractSizeRange(results, \"Growth\", min_size = -10, max_size = -8) } # }"},{"path":"/reference/extractTrophicLevels.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute trophic levels for functional groups using diet composition — extractTrophicLevels","title":"Compute trophic levels for functional groups using diet composition — extractTrophicLevels","text":"Calculates trophic levels functional group based diet composition using iterative Gauss-Seidel algorithm.","code":""},{"path":"/reference/extractTrophicLevels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute trophic levels for functional groups using diet composition — extractTrophicLevels","text":"","code":"extractTrophicLevels(mdl)"},{"path":"/reference/extractTrophicLevels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute trophic levels for functional groups using diet composition — extractTrophicLevels","text":"mdl ZooMSS model results object containing 3D diet data (mdl$diet). Dimensions time, groups, prey_items columns 1:3 always phytoplankton size classes remaining columns zooplankton/fish groups.","code":""},{"path":"/reference/extractTrophicLevels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute trophic levels for functional groups using diet composition — extractTrophicLevels","text":"Matrix rows time steps columns functional groups","code":""},{"path":"/reference/extractTrophicLevels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute trophic levels for functional groups using diet composition — extractTrophicLevels","text":"Calculate Trophic Levels Diet Matrix function computes trophic levels : Starting phytoplankton trophic level 1.0 Initializing groups trophic level 2.0 Iteratively updating trophic levels based weighted diet composition Continuing convergence (difference < 0.01) maximum iterations (100) Processing 3D diet arrays time series data Trophic level calculation follows: TL = 1 + sum(diet_fraction_i * TL_prey_i) function calculates trophic levels time step separately dynamically determines number groups diet matrix dimensions. provides quantitative measure group's position food web useful analyzing ecosystem structure energy transfer efficiency.","code":""},{"path":"/reference/extractTrophicLevels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute trophic levels for functional groups using diet composition — extractTrophicLevels","text":"","code":"if (FALSE) { # \\dontrun{ # After running ZooMSS model with 3D time series results <- zoomss_model(input_params, Groups) trophic_levels <- extractTrophicLevels(results)  # Returns matrix (time x groups)  # View trophic levels by group for final time step final_tl <- trophic_levels[nrow(trophic_levels), ] names(final_tl) <- results$param$Groups$Species print(final_tl) } # }"},{"path":"/reference/getBiomass.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert ZooMSS abundance matrices to biomass by multiplying by body weights — getBiomass","title":"Convert ZooMSS abundance matrices to biomass by multiplying by body weights — getBiomass","text":"Converts abundance data wet weight biomass multiplying abundances corresponding body weights size class. Optionally converts carbon biomass.","code":""},{"path":"/reference/getBiomass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert ZooMSS abundance matrices to biomass by multiplying by body weights — getBiomass","text":"","code":"getBiomass(mdl, units = \"ww\")"},{"path":"/reference/getBiomass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert ZooMSS abundance matrices to biomass by multiplying by body weights — getBiomass","text":"mdl ZooMSS model object containing abundance array (N) weight vector (param$w) units Character string specifying biomass units: \"ww\" wet weight (default) \"carbon\" carbon biomass","code":""},{"path":"/reference/getBiomass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert ZooMSS abundance matrices to biomass by multiplying by body weights — getBiomass","text":"3D array biomass values dimensions N. Units depend units parameter: \"ww\": grams wet weight \"carbon\": grams carbon","code":""},{"path":"/reference/getBiomass.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert ZooMSS abundance matrices to biomass by multiplying by body weights — getBiomass","text":"Convert Abundance Biomass function transforms abundance matrices biomass applying weight vector across size classes. Essential analyses requiring biomass units rather abundance counts. Works 3D arrays (time, groups, size_classes). Can convert either wet weight carbon biomass units.","code":""},{"path":"/reference/getBiomass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert ZooMSS abundance matrices to biomass by multiplying by body weights — getBiomass","text":"","code":"if (FALSE) { # \\dontrun{ # Run ZooMSS model results <- zoomss_model(input_params, Groups)  # Convert abundances to wet weight biomass biomass_ww <- getBiomass(results, units = \"ww\")  # Convert abundances to carbon biomass biomass_carbon <- getBiomass(results, units = \"carbon\") } # }"},{"path":"/reference/getGroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Load default or custom functional groups for ZooMSS model — getGroups","title":"Load default or custom functional groups for ZooMSS model — getGroups","text":"Provides access default ZooMSS functional groups loads custom groups file. function primary way obtain Groups data ZooMSS model runs.","code":""},{"path":"/reference/getGroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load default or custom functional groups for ZooMSS model — getGroups","text":"","code":"getGroups(source = \"default\", file = NULL)"},{"path":"/reference/getGroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load default or custom functional groups for ZooMSS model — getGroups","text":"source Character string specifying data source. Options: \"default\": Use built-ZooMSS functional groups (default) \"file\": Load groups CSV file \"template\": Export default groups file modification file Path CSV file source=\"file\" source=\"template\"","code":""},{"path":"/reference/getGroups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load default or custom functional groups for ZooMSS model — getGroups","text":"Data frame containing functional groups required columns: Species, Type, W0, Wmax, biological parameters","code":""},{"path":"/reference/getGroups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load default or custom functional groups for ZooMSS model — getGroups","text":"Get Default ZooMSS Functional Groups function provides flexible access functional groups data: Default groups: Returns standard ZooMSS functional groups (12 groups) Custom file: Loads validates groups user-provided CSV file Template creation: Exports default groups file user modification default groups include: Flagellates, Ciliates, Larvaceans, OmniCopepods, CarnCopepods, Euphausiids, Chaetognaths, Salps, Jellyfish, three Fish groups (Small, Medium, Large). groups data validated ensure contains required columns reasonable parameter values successful model runs.","code":""},{"path":"/reference/getGroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load default or custom functional groups for ZooMSS model — getGroups","text":"","code":"if (FALSE) { # \\dontrun{ # Use default groups Groups <- getGroups()  # Create a template file for modification getGroups(source = \"template\", file = \"my_groups.csv\")  # Load custom groups from file custom_groups <- getGroups(source = \"file\", file = \"my_groups.csv\")  # Modify default groups programmatically Groups <- getGroups() Groups$W0[Groups$Species == \"Flagellates\"] <- -12.5  # Modify minimum size } # }"},{"path":"/reference/loadDefaultGroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to load default ZooMSS groups — loadDefaultGroups","title":"Internal function to load default ZooMSS groups — loadDefaultGroups","text":"Loads default functional groups package data CSV file. internal function used getGroups().","code":""},{"path":"/reference/loadDefaultGroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to load default ZooMSS groups — loadDefaultGroups","text":"","code":"loadDefaultGroups()"},{"path":"/reference/loadDefaultGroups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to load default ZooMSS groups — loadDefaultGroups","text":"Data frame default functional groups","code":""},{"path":"/reference/loadDefaultGroups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Internal function to load default ZooMSS groups — loadDefaultGroups","text":"Load Default Functional Groups Data function handles actual loading default groups data, whether package data (available) CSV file data-raw.","code":""},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/plotEnvironment.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot environmental forcing data — plotEnvironment","title":"Plot environmental forcing data — plotEnvironment","text":"Creates plots sea surface temperature chlorophyll time series visualizing environmental forcing data used ZooMSS model runs.","code":""},{"path":"/reference/plotEnvironment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot environmental forcing data — plotEnvironment","text":"","code":"plotEnvironment(env_data)"},{"path":"/reference/plotEnvironment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot environmental forcing data — plotEnvironment","text":"env_data Environmental data frame time, sst, chl columns","code":""},{"path":"/reference/plotEnvironment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot environmental forcing data — plotEnvironment","text":"ggplot object (patchwork available) list two ggplot objects","code":""},{"path":"/reference/plotEnvironment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot environmental forcing data — plotEnvironment","text":"Plot Environmental Time Series function creates two separate plots different y-axes scales: SST plot (red line) temperature deg C Chlorophyll plot (green line) concentration mg/m^3 plots can combined using patchwork package available, otherwise separate plots returned list. helps users visualize environmental forcing drives ZooMSS model dynamics.","code":""},{"path":"/reference/plotEnvironment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot environmental forcing data — plotEnvironment","text":"","code":"# Create sample data and plot env_data <- data.frame(   time = 1:100,   dt = 0.01,   sst = 15 + 3*sin(2*pi*(1:100)/50),   chl = 0.5 + 0.2*cos(2*pi*(1:100)/50) ) plots <- plotEnvironment(env_data)"},{"path":"/reference/plotPPMR.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize predator-prey mass ratio patterns in ZooMSS results — plotPPMR","title":"Visualize predator-prey mass ratio patterns in ZooMSS results — plotPPMR","text":"Creates plot showing distribution predator-prey mass ratios (PPMR) across functional groups, providing insights trophic structure ecosystem.","code":""},{"path":"/reference/plotPPMR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize predator-prey mass ratio patterns in ZooMSS results — plotPPMR","text":"","code":"plotPPMR(mdl, idx)"},{"path":"/reference/plotPPMR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize predator-prey mass ratio patterns in ZooMSS results — plotPPMR","text":"mdl ZooMSS results object containing model outputs parameters idx time index plot","code":""},{"path":"/reference/plotPPMR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize predator-prey mass ratio patterns in ZooMSS results — plotPPMR","text":"ggplot object showing PPMR distribution species-specific overlays","code":""},{"path":"/reference/plotPPMR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize predator-prey mass ratio patterns in ZooMSS results — plotPPMR","text":"Plot Predator-Prey Mass Ratio (PPMR) function calculates visualizes PPMR patterns : Computing theoretical PPMR values functional group size class Weighting biomass show realized community patterns Creating density plot PPMR distribution across community Overlaying species-specific PPMR values points PPMR key ecological metric describes size relationship predators prey, providing insight food web structure energy transfer efficiency marine ecosystems.","code":""},{"path":"/reference/plotPPMR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize predator-prey mass ratio patterns in ZooMSS results — plotPPMR","text":"","code":"if (FALSE) { # \\dontrun{ # After running ZooMSS model results <- zoomss_model(input_params, Groups) ppmr_plot <- plotPPMR(results) print(ppmr_plot) } # }"},{"path":"/reference/plotSizeSpectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize abundance size spectra across functional groups — plotSizeSpectra","title":"Visualize abundance size spectra across functional groups — plotSizeSpectra","text":"Creates log-log plot abundance versus body size functional groups, showing classic size spectrum pattern marine ecosystems.","code":""},{"path":"/reference/plotSizeSpectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize abundance size spectra across functional groups — plotSizeSpectra","text":"","code":"plotSizeSpectra(mdl, by = \"abundance\", n_years = 10)"},{"path":"/reference/plotSizeSpectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize abundance size spectra across functional groups — plotSizeSpectra","text":"mdl ZooMSS results object containing model outputs parameters Character string specifying metric plot. Options: \"abundance\", \"biomass\", \"mortality\", \"growth\" (default: \"abundance\") n_years number years (end) average size spectra","code":""},{"path":"/reference/plotSizeSpectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize abundance size spectra across functional groups — plotSizeSpectra","text":"ggplot object showing log abundance vs log body weight species","code":""},{"path":"/reference/plotSizeSpectra.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize abundance size spectra across functional groups — plotSizeSpectra","text":"Plot Size Spectra ZooMSS Results function visualizes abundance size spectrum : Converting abundance data long format body weights Filtering zero abundances focus active size classes Creating log-log plots colored functional group Using species-specific colors defined Groups parameter table Size spectra fundamental patterns marine ecology, typically showing declining abundance increasing body size. visualization helps assess model realism identify dominant size classes within functional group.","code":""},{"path":"/reference/plotSizeSpectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize abundance size spectra across functional groups — plotSizeSpectra","text":"","code":"if (FALSE) { # \\dontrun{ # After running ZooMSS model results <- zoomss_model(input_params, Groups) size_plot <- plotSizeSpectra(results) print(size_plot) } # }"},{"path":"/reference/plotTimeSeries.html","id":null,"dir":"Reference","previous_headings":"","what":"Unified function to visualize time series changes for different metrics — plotTimeSeries","title":"Unified function to visualize time series changes for different metrics — plotTimeSeries","text":"Creates time series plots showing abundance, biomass, mortality, growth rates functional groups change throughout ZooMSS simulation period.","code":""},{"path":"/reference/plotTimeSeries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unified function to visualize time series changes for different metrics — plotTimeSeries","text":"","code":"plotTimeSeries(   mdl,   by = \"abundance\",   type = \"line\",   transform = \"identity\",   species = NULL )"},{"path":"/reference/plotTimeSeries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unified function to visualize time series changes for different metrics — plotTimeSeries","text":"mdl ZooMSS results object containing model outputs time series data Character string specifying metric plot. Options: \"abundance\", \"biomass\", \"mortality\", \"growth\" (default: \"abundance\") type Character vector plot type. Use line default line plot, stack fill (per geom_area) stacked proportional plots. (default: \"line\") transform Character vector required y-axis transformation. Options scale_*_continuous (Default: \"identity). species Character vector species names include. NULL, species included (default: NULL, applies metrics)","code":""},{"path":"/reference/plotTimeSeries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unified function to visualize time series changes for different metrics — plotTimeSeries","text":"ggplot object showing requested time series species","code":""},{"path":"/reference/plotTimeSeries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Unified function to visualize time series changes for different metrics — plotTimeSeries","text":"Plot Time Series Data ZooMSS Results function creates time series visualizations : Abundance: Summing abundances across size classes, log-transformed y-axis Biomass: Calculating biomass (abundance × weight), optional stacking proportional scaling Mortality: Averaging predation mortality rates across size classes Growth: Averaging growth rates across size classes, log-transformed y-axis plots use species-specific colors filter zero values. Time series plots help identify: Equilibration time model runs Seasonal cyclical patterns ecological metrics Relative patterns functional groups Model stability convergence behavior","code":""},{"path":"/reference/plotTimeSeries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unified function to visualize time series changes for different metrics — plotTimeSeries","text":"","code":"if (FALSE) { # \\dontrun{ # After running ZooMSS model results <- zoomss_model(input_params, Groups)  # Plot different metrics abundance_plot <- plotTimeSeries(results, by = \"abundance\", transform = \"log10\") biomass_plot <- plotTimeSeries(results, by = \"biomass\", transform = \"log10\") mortality_plot <- plotTimeSeries(results, by = \"mortality\") growth_plot <- plotTimeSeries(results, by = \"growth\")  stacked_plot <- plotTimeSeries(results, by = \"biomass\", type = \"stack\") prop_plot <- plotTimeSeries(results, by = \"biomass\", type = \"fill\")  # Focus on specific species (works for all metrics) copepod_plot <- plotTimeSeries(results, by = \"biomass\",                               species = c(\"OmniCopepods\", \"CarnCopepods\")) abundance_copepods <- plotTimeSeries(results, by = \"abundance\",                                     species = c(\"OmniCopepods\", \"CarnCopepods\")) mortality_copepods <- plotTimeSeries(results, by = \"mortality\",                                     species = c(\"OmniCopepods\", \"CarnCopepods\")) growth_copepods <- plotTimeSeries(results, by = \"growth\",                                  species = c(\"OmniCopepods\", \"CarnCopepods\")) } # }"},{"path":"/reference/reduceAll.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate abundances across all groups and size classes — reduceAll","title":"Aggregate abundances across all groups and size classes — reduceAll","text":"Calculates total abundance across functional groups size classes using specified method.","code":""},{"path":"/reference/reduceAll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate abundances across all groups and size classes — reduceAll","text":"","code":"reduceAll(x, method = \"sum\")"},{"path":"/reference/reduceAll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate abundances across all groups and size classes — reduceAll","text":"x 3D array outptut ZooMSS model method Character string specifying aggregation method: \"sum\" (default) \"mean\".","code":""},{"path":"/reference/reduceAll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate abundances across all groups and size classes — reduceAll","text":"Vector total abundance values (one per spatial cell)","code":""},{"path":"/reference/reduceAll.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate abundances across all groups and size classes — reduceAll","text":"Aggregate abundances across groups size classes function provides aggregated view ZooMSS output applying method across functional groups size classes.","code":""},{"path":"/reference/reduceSize.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate ZooMSS abundances across all size classes — reduceSize","title":"Aggregate ZooMSS abundances across all size classes — reduceSize","text":"Sums abundance values across size classes functional group, providing total abundance per group.","code":""},{"path":"/reference/reduceSize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate ZooMSS abundances across all size classes — reduceSize","text":"","code":"reduceSize(x, method = \"sum\")"},{"path":"/reference/reduceSize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate ZooMSS abundances across all size classes — reduceSize","text":"x 3D array outptut ZooMSS model method Character string specifying aggregation method: \"sum\" (default) \"mean\".","code":""},{"path":"/reference/reduceSize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate ZooMSS abundances across all size classes — reduceSize","text":"List vectors total abundance per functional group","code":""},{"path":"/reference/reduceSize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate ZooMSS abundances across all size classes — reduceSize","text":"Sum ZooMSS Output Across Size Bins function collapses size dimension ZooMSS output summing across size classes. Useful analyzing total abundance patterns without size structure detail.","code":""},{"path":"/reference/reduceSize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate ZooMSS abundances across all size classes — reduceSize","text":"","code":"if (FALSE) { # \\dontrun{ # After running ZooMSS model results <- zoomss_model(input_params, Groups) total_abundances <- reduceSize(results$abundances) } # }"},{"path":"/reference/reduceSpecies.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate ZooMSS abundances across all species — reduceSpecies","title":"Aggregate ZooMSS abundances across all species — reduceSpecies","text":"Aggregates abundance values across species bins functional group size class using specified method.","code":""},{"path":"/reference/reduceSpecies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate ZooMSS abundances across all species — reduceSpecies","text":"","code":"reduceSpecies(x, method = \"sum\")"},{"path":"/reference/reduceSpecies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate ZooMSS abundances across all species — reduceSpecies","text":"x 3D array outptut ZooMSS model method Character string specifying aggregation method: \"sum\" (default) \"mean\".","code":""},{"path":"/reference/reduceSpecies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate ZooMSS abundances across all species — reduceSpecies","text":"Array species dimension reduced using specified method","code":""},{"path":"/reference/reduceSpecies.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate ZooMSS abundances across all species — reduceSpecies","text":"Aggregate ZooMSS abundances across species function collapses species dimension applying specified method (sum mean) across species bins.","code":""},{"path":"/reference/untibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert tibble to data frame for efficiency — untibble","title":"Convert tibble to data frame for efficiency — untibble","text":"Removes tibble attributes converts plain data frame improved speed memory efficiency computational workflows.","code":""},{"path":"/reference/untibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert tibble to data frame for efficiency — untibble","text":"","code":"untibble(tibble)"},{"path":"/reference/untibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert tibble to data frame for efficiency — untibble","text":"tibble tibble data frame object convert","code":""},{"path":"/reference/untibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert tibble to data frame for efficiency — untibble","text":"Plain data frame without tibble attributes","code":""},{"path":"/reference/untibble.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert tibble to data frame for efficiency — untibble","text":"Remove Tibble Attributes utility function strips tibble-specific attributes can slow operations tight computational loops. Used internally ZooMSS performance optimization working large datasets.","code":""},{"path":"/reference/validateGroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate ZooMSS functional groups data structure and values — validateGroups","title":"Validate ZooMSS functional groups data structure and values — validateGroups","text":"Performs comprehensive validation functional groups data ensure meets ZooMSS model requirements.","code":""},{"path":"/reference/validateGroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate ZooMSS functional groups data structure and values — validateGroups","text":"","code":"validateGroups(groups)"},{"path":"/reference/validateGroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate ZooMSS functional groups data structure and values — validateGroups","text":"groups Data frame containing functional groups data","code":""},{"path":"/reference/validateGroups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate ZooMSS functional groups data structure and values — validateGroups","text":"TRUE validation passes (invisibly), otherwise throws error","code":""},{"path":"/reference/validateGroups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate ZooMSS functional groups data structure and values — validateGroups","text":"Validate Functional Groups Data function validates: Required column names present Data types correct Parameter values within reasonable ranges missing values critical columns Size ranges logical (W0 < Wmax)","code":""},{"path":"/reference/validateGroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate ZooMSS functional groups data structure and values — validateGroups","text":"","code":"if (FALSE) { # \\dontrun{ Groups <- getGroups() validateGroups(Groups)  # Should pass  # This would fail validation: bad_groups <- Groups bad_groups$W0 <- NULL validateGroups(bad_groups)  # Error: missing required column } # }"},{"path":"/reference/zoomss_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Main ZooMSS model function for complete simulations — zoomss_model","title":"Main ZooMSS model function for complete simulations — zoomss_model","text":"main wrapper function orchestrates complete ZooMSS model simulation parameter setup model execution output processing.","code":""},{"path":"/reference/zoomss_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main ZooMSS model function for complete simulations — zoomss_model","text":"","code":"zoomss_model(input_params, Groups = NULL, isave = 1)"},{"path":"/reference/zoomss_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main ZooMSS model function for complete simulations — zoomss_model","text":"input_params Data frame containing model parameters environmental time series. Must include columns: time (time vector years), sst (sea surface temperature), chl (chlorophyll). Can optionally include cellID spatial data. time step (dt) maximum time (tmax) automatically calculated time vector. Can created using createInputParams(). Groups Data frame defining functional groups biological parameters. Must include columns defining species characteristics, size ranges, feeding parameters. NULL, uses default ZooMSS functional groups. Can obtained/customized using getGroups(). isave Save frequency time steps (default: 10)","code":""},{"path":"/reference/zoomss_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main ZooMSS model function for complete simulations — zoomss_model","text":"Complete ZooMSS model results object containing: param: Model parameters environmental forcing data time: Time values corresponding saved results (accounting isave) abundance: Abundance time series (time x groups x size classes) growth: Growth rate time series mortality: Mortality rate time series diet: Diet composition time series Additional model structure kernel data","code":""},{"path":"/reference/zoomss_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Main ZooMSS model function for complete simulations — zoomss_model","text":"Run Complete ZooMSS Model Simulation function coordinates entire ZooMSS modeling workflow: Validates environmental time series data provided Sets model parameters using Groups data input parameters Initializes model structure feeding kernels Runs model forward time dynamic environmental forcing Processes outputs averaging final 50% simulation Returns organized results including abundances, diets, growth, mortality primary entry point running ZooMSS simulations environmental forcing.","code":""},{"path":"/reference/zoomss_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main ZooMSS model function for complete simulations — zoomss_model","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage with default groups env_data <- createEnviroData(10, 0.01) input_params <- createInputParams(env_data$time, env_data$sst, env_data$chl) results <- zoomss_model(input_params, isave = 50)  # Using custom groups Groups <- getGroups()  # Get default groups Groups$W0[1] <- -12.5          # Modify a parameter results <- zoomss_model(input_params, Groups, isave = 100)  # Loading groups from file custom_groups <- getGroups(source = \"file\", file = \"my_groups.csv\") results <- zoomss_model(input_params, custom_groups) } # }"},{"path":"/reference/zoomss_mvf.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve McKendrick-von Foerster equation for size-structured populations — zoomss_mvf","title":"Solve McKendrick-von Foerster equation for size-structured populations — zoomss_mvf","text":"Solves McKendrick-von Foerster (MvF) partial differential equation size-structured population dynamics using finite difference approach base R.","code":""},{"path":"/reference/zoomss_mvf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve McKendrick-von Foerster equation for size-structured populations — zoomss_mvf","text":"","code":"zoomss_mvf(   ngrps,   curr_min_size,   curr_max_size,   A_iter,   C_iter,   Nb_iter,   S_iter,   A,   B,   C,   Nb,   S )"},{"path":"/reference/zoomss_mvf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve McKendrick-von Foerster equation for size-structured populations — zoomss_mvf","text":"ngrps Number functional groups model curr_min_size Vector minimum size class indices group curr_max_size Vector maximum size class indices group A_iter Matrix advection coefficients current iteration C_iter Matrix diagonal coefficients current iteration Nb_iter Matrix store updated abundances current iteration S_iter Matrix source terms current iteration Matrix advection coefficients B Matrix diffusion coefficients C Matrix diagonal coefficients Nb Matrix abundances updated S Matrix source terms","code":""},{"path":"/reference/zoomss_mvf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solve McKendrick-von Foerster equation for size-structured populations — zoomss_mvf","text":"Updated abundance matrix (Nb) new size-class distributions","code":""},{"path":"/reference/zoomss_mvf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Solve McKendrick-von Foerster equation for size-structured populations — zoomss_mvf","text":"McKendrick-von Foerster Equation Solver (Base R Implementation) function implements numerical solution McKendrick-von Foerster equation, describes populations change across size classes time. equation solved using upwind finite difference scheme handles: Growth size classes (advection term) Diffusion adjacent size classes Source sink terms feeding mortality function processes functional group separately applies boundary conditions appropriate size-structured models. last size class set zero abundance represent maximum size limits. core computational component ZooMSS updates population abundances time step based growth, mortality, reproduction processes.","code":""},{"path":"/reference/zoomss_mvf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Solve McKendrick-von Foerster equation for size-structured populations — zoomss_mvf","text":"","code":"if (FALSE) { # \\dontrun{ # This function is typically called internally by zoomss_run # Example shows the structure of parameters needed: ngrps <- 9 ngrid <- 100 curr_min_size <- c(1, 10, 20, 30, 40, 50, 60, 70, 80) curr_max_size <- c(30, 40, 50, 60, 70, 80, 90, 95, 100)  # Initialize coefficient matrices A <- matrix(0, nrow = ngrps, ncol = ngrid) B <- matrix(0, nrow = ngrps, ncol = ngrid)  C <- matrix(1, nrow = ngrps, ncol = ngrid) S <- matrix(0, nrow = ngrps, ncol = ngrid) Nb <- matrix(0.1, nrow = ngrps, ncol = ngrid)  # Run MvF solver updated_abundances <- zoomss_mvf(ngrps, curr_min_size, curr_max_size,                                        A, C, Nb, S, A, B, C, Nb, S) } # }"},{"path":"/reference/zoomss_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize and validate ZooMSS model parameters — zoomss_params","title":"Initialize and validate ZooMSS model parameters — zoomss_params","text":"Sets complete parameter list ZooMSS model runs, including functional group parameters, model dimensions, environmental forcing data.","code":""},{"path":"/reference/zoomss_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize and validate ZooMSS model parameters — zoomss_params","text":"","code":"zoomss_params(Groups, input_params, isave)"},{"path":"/reference/zoomss_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize and validate ZooMSS model parameters — zoomss_params","text":"Groups Data frame containing functional group definitions columns: Species, Type, W0 (log min size), Wmax (log max size), various biological parameters input_params Data frame model parameters including: time (time vector years), sst (sea surface temperature), chl (chlorophyll). time vector can start value model automatically calculates dt (time step) tmax (maximum time). isave Save frequency time steps (default: 50)","code":""},{"path":"/reference/zoomss_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize and validate ZooMSS model parameters — zoomss_params","text":"List containing comprehensive model parameters: Groups: Functional group definitions ngrps: Number functional groups ngrid: Number size classes w: Size class weights (g) tmax, dt, isave: Temporal parameters zoo_grps, fish_grps: Indices different organism types phyto_int, phyto_slope: Time series phytoplankton parameters temp_eff_zoo, temp_eff_fish: Time series temperature effects Additional biological physical parameters","code":""},{"path":"/reference/zoomss_params.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize and validate ZooMSS model parameters — zoomss_params","text":"Set ZooMSS Model Parameters function creates comprehensive parameter object contains: Static Parameters (fixed across time steps): Model dimensions (number groups, size classes, time steps) Biological parameters (growth efficiency, mortality rates) Size class definitions ranges functional group Phytoplankton size spectrum parameters Dynamic Parameters (calculated environmental data): Phytoplankton abundance time series based chlorophyll Temperature effects metabolism zooplankton fish Environmental forcing validation interpolation function validates environmental time series data covers full simulation period pre-calculates time-varying parameters optimize model performance main simulation loop.","code":""},{"path":"/reference/zoomss_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize and validate ZooMSS model parameters — zoomss_params","text":"","code":"if (FALSE) { # \\dontrun{ # Load functional groups data(Groups)  # Create environmental time series env_data <- createEnviroData(10, 0.01) input_params <- createInputParams(env_data$time, env_data$sst, env_data$chl)  # Generate parameter list params <- zoomss_params(Groups, input_params, isave = 50) } # }"},{"path":"/reference/zoomss_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute the main ZooMSS simulation loop with dynamic environmental forcing — zoomss_run","title":"Execute the main ZooMSS simulation loop with dynamic environmental forcing — zoomss_run","text":"Runs ZooMSS model forward time, updating environmental conditions population dynamics time step using McKendrick-von Foerster framework.","code":""},{"path":"/reference/zoomss_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute the main ZooMSS simulation loop with dynamic environmental forcing — zoomss_run","text":"","code":"zoomss_run(model)"},{"path":"/reference/zoomss_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute the main ZooMSS simulation loop with dynamic environmental forcing — zoomss_run","text":"model Model object created zoomss_setup containing: param: Complete parameter list environmental time series Feeding kernels biological rate parameters Initial conditions model structure","code":""},{"path":"/reference/zoomss_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute the main ZooMSS simulation loop with dynamic environmental forcing — zoomss_run","text":"List containing complete model output: param: Model parameters used simulation N: Abundance time series (time x groups x size classes) gg: Growth rate time series diet: Diet composition time series Z: Mortality rate time series time: Time values corresponding saved results (accounting isave) w: Size class weights (g) Additional time series data model results","code":""},{"path":"/reference/zoomss_run.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Execute the main ZooMSS simulation loop with dynamic environmental forcing — zoomss_run","text":"Run ZooMSS Model Forward Time core simulation engine ZooMSS : Environmental Dynamics: Updates phytoplankton abundance spectrum based chlorophyll time series Applies temperature effects zooplankton fish metabolism Recalculates feeding kernels current environmental conditions Population Dynamics: Solves McKendrick-von Foerster equation size-structured growth Updates feeding interactions size classes groups Calculates mortality predation, senescence, fishing Handles recruitment boundary conditions functional group Time Integration: Processes model time steps adaptive environmental forcing Saves output specified intervals memory efficiency Maintains mass balance numerical stability throughout simulation Unlike static models, version dynamically updates phytoplankton spectra temperature effects time step based provided environmental data.","code":""},{"path":"/reference/zoomss_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute the main ZooMSS simulation loop with dynamic environmental forcing — zoomss_run","text":"","code":"if (FALSE) { # \\dontrun{ # Set up model parameters and structure params <- zoomss_params(Groups, input_params) model <- zoomss_setup(params)  # Run the simulation results <- zoomss_run(model)  # Access final abundances final_abundances <- results$N[dim(results$N)[1],,] } # }"},{"path":"/reference/zoomss_setup.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize ZooMSS model components and calculate feeding interactions — zoomss_setup","title":"Initialize ZooMSS model components and calculate feeding interactions — zoomss_setup","text":"Sets ZooMSS model structure calculating feeding kernels, mortality rates, model components remain static simulation.","code":""},{"path":"/reference/zoomss_setup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize ZooMSS model components and calculate feeding interactions — zoomss_setup","text":"","code":"zoomss_setup(param)"},{"path":"/reference/zoomss_setup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize ZooMSS model components and calculate feeding interactions — zoomss_setup","text":"param Complete parameter list created zoomss_params containing: Groups: Functional group definitions biological parameters Model dimensions (ngrps, ngrid, time parameters) Environmental forcing time series Physical biological constants","code":""},{"path":"/reference/zoomss_setup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize ZooMSS model components and calculate feeding interactions — zoomss_setup","text":"Model object containing: param: Input parameters (passed ) dynam_xxx: Dynamic feeding kernel arrays group interactions (xxx = growthkernel, diffkernel, dietkernel, mortkernel) phyto_xxx: Phytoplankton feeding kernel arrays (xxx = growthkernel, diffkernel, dietkernel) nPP: Initial phytoplankton abundance spectrum M_sb_base: Baseline senescence mortality rates fish_mort: Fishing mortality rates assim_eff: Assimilation efficiency matrix temp_eff: Temperature effect matrix (initialized) N: Initial abundance arrays time: Time array storing time values (initialized NA) Additional model structure components","code":""},{"path":"/reference/zoomss_setup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize ZooMSS model components and calculate feeding interactions — zoomss_setup","text":"Setup ZooMSS Model Structure Feeding Kernels function initializes core ZooMSS model structure calculating: Static Components (calculated ): Feeding preference kernels based predator-prey size ratios Search volumes encounter rates size classes Baseline mortality rates (senescence, fishing) Initial abundance distributions functional groups Dynamic Component Structures (updated run): Phytoplankton feeding kernels (structure calculated , values updated environment) Growth diffusion kernels zooplankton fish interactions Diet mortality tracking arrays Model Architecture: Size-structured populations across logarithmic size classes Multiple functional groups different feeding behaviors Environmental coupling phytoplankton temperature function separates static calculations (done efficiency) dynamic calculations (updated time step zoomss_run).","code":""},{"path":"/reference/zoomss_setup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize ZooMSS model components and calculate feeding interactions — zoomss_setup","text":"","code":"if (FALSE) { # \\dontrun{ # Create parameters for model setup params <- zoomss_params(Groups, input_params)  # Initialize model structure model <- zoomss_setup(params)  # Model is now ready for time integration with zoomss_run results <- zoomss_run(model) } # }"}]
