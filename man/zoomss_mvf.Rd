% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/zoomss_mvf.R
\name{zoomss_mvf}
\alias{zoomss_mvf}
\title{Solve McKendrick-von Foerster equation for size-structured populations}
\usage{
zoomss_mvf(
  ngrps,
  curr_min_size,
  curr_max_size,
  A_iter,
  C_iter,
  Nb_iter,
  S_iter,
  A,
  B,
  C,
  Nb,
  S
)
}
\arguments{
\item{ngrps}{Number of functional groups in the model}

\item{curr_min_size}{Vector of minimum size class indices for each group}

\item{curr_max_size}{Vector of maximum size class indices for each group}

\item{A_iter}{Matrix of advection coefficients for current iteration}

\item{C_iter}{Matrix of diagonal coefficients for current iteration}

\item{Nb_iter}{Matrix to store updated abundances for current iteration}

\item{S_iter}{Matrix of source terms for current iteration}

\item{A}{Matrix of advection coefficients}

\item{B}{Matrix of diffusion coefficients}

\item{C}{Matrix of diagonal coefficients}

\item{Nb}{Matrix of abundances to be updated}

\item{S}{Matrix of source terms}
}
\value{
Updated abundance matrix (Nb) with new size-class distributions
}
\description{
Solves the McKendrick-von Foerster (MvF) partial differential equation
for size-structured population dynamics using a finite difference approach in base R.
}
\details{
McKendrick-von Foerster Equation Solver (Base R Implementation)

This function implements the numerical solution to the McKendrick-von Foerster
equation, which describes how populations change across size classes over time.
The equation is solved using an upwind finite difference scheme that handles:
\itemize{
\item Growth through size classes (advection term)
\item Diffusion between adjacent size classes
\item Source and sink terms from feeding and mortality
}

The function processes each functional group separately and applies boundary conditions
appropriate for size-structured models. The last size class is set to zero abundance
to represent maximum size limits.

This is a core computational component of ZooMSS that updates population abundances
at each time step based on growth, mortality, and reproduction processes.
}
\examples{
\dontrun{
# This function is typically called internally by zoomss_run
# Example shows the structure of parameters needed:
ngrps <- 9
ngrid <- 100
curr_min_size <- c(1, 10, 20, 30, 40, 50, 60, 70, 80)
curr_max_size <- c(30, 40, 50, 60, 70, 80, 90, 95, 100)

# Initialize coefficient matrices
A <- matrix(0, nrow = ngrps, ncol = ngrid)
B <- matrix(0, nrow = ngrps, ncol = ngrid) 
C <- matrix(1, nrow = ngrps, ncol = ngrid)
S <- matrix(0, nrow = ngrps, ncol = ngrid)
Nb <- matrix(0.1, nrow = ngrps, ncol = ngrid)

# Run MvF solver
updated_abundances <- zoomss_mvf(ngrps, curr_min_size, curr_max_size,
                                       A, C, Nb, S, A, B, C, Nb, S)
}

}
