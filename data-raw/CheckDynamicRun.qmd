---
title: "Compare Static and Dynamic Runs"
format: 
  html:
    embed-resources: true
    toc: true
---

First lets load all the common data and scripts

```{r}
#| message: false

source("zoomss_model.R") #source the model code
source("zXtras.R")
source("zPlot.R")

library(tidyverse)
library(patchwork)

enviro_data <- zCalculatePhytoParam(data.frame(cellID = 1,
                                                      sst = 15,
                                                      chlo = 0.5))
# Add delta time (years) and simulation length
enviro_data$dt <- 0.01
enviro_data$tmax <- 200

# Setup jobname
jobname <- "20250730_DynamicTest"  # This is the job name to save the run
ID <- 1 # Which row of the environmental data to use

HPC <- FALSE # Is this being run on a HPC
SaveTimeSteps <- TRUE # Should we save all time steps

Groups <- read.csv("TestGroups.csv", stringsAsFactors = FALSE) # Load functional group information

input_params <- enviro_data[ID,]

```


## Static Runs

```{r}
#| results: hide

out_static$model$model_runtime <- system.time(
  out_static <- zoomss_model(input_params, Groups, SaveTimeSteps)
)

```


## Dynamic Runs

```{r}
# Calculate number of time steps
n_time_steps <- floor(input_params$tmax / input_params$dt)
time_years <- seq(0, input_params$tmax, by = input_params$dt)[1:n_time_steps]

# Create environmental data for time-varying conditions
enviro_dynamic <- data.frame(
  time_step = 1:n_time_steps,
  sst = input_params$sst,
  chlo = input_params$chlo # Constant chlorophyll
)

# Merge environmental data with input parameters for model run
input_params_dynamic <- cbind(input_params, enviro_dynamic)

ggplot(data = enviro_dynamic) +
  geom_line(aes(x = time_step, y = sst)) +
ggplot(data = enviro_dynamic) +
  geom_line(aes(x = time_step, y = chlo))

```



```{r}
#| results: hide
out_dynamic$model$model_runtime <- system.time(
  out_dynamic <- zoomss_model(input_params_dynamic, Groups, SaveTimeSteps)
)

```



## Compare results

```{r}

(zPlot_SizeSpectra(out_static) + zPlot_SizeSpectra(out_dynamic)) /
  patchwork::guide_area() + patchwork::plot_layout(guides = "collect") & 
  theme(
    legend.position = "bottom",  # Move the legend to the bottom
    legend.box = "horizontal"    # Arrange legend items horizontally
  ) &
  guides(
    color = guide_legend(nrow = 3) # Set the number of rows for the color legend
  )

```

```{r}

zPlot_AbundTimeSeries(out_static) / zPlot_AbundTimeSeries(out_dynamic) /
patchwork::guide_area() + patchwork::plot_layout(guides = "collect") & 
  theme(
    legend.position = "bottom",  # Move the legend to the bottom
    legend.box = "horizontal"    # Arrange legend items horizontally
  ) &
  guides(
    color = guide_legend(nrow = 3) # Set the number of rows for the color legend
  )

```

```{r}

zPlot_GrowthTimeSeries(out_static) / zPlot_GrowthTimeSeries(out_dynamic) /
  patchwork::guide_area() + patchwork::plot_layout(guides = "collect") & 
  theme(
    legend.position = "bottom",  # Move the legend to the bottom
    legend.box = "horizontal"    # Arrange legend items horizontally
  ) &
  guides(
    color = guide_legend(nrow = 3) # Set the number of rows for the color legend
  )

```


## Example 2: Linear warming trend with seasonal chlorophyll cycle

```{r}
# Calculate number of time steps
n_time_steps <- floor(input_params$tmax / input_params$dt)
time_years <- seq(0, input_params$tmax, by = input_params$dt)[1:n_time_steps]

enviro_dynamic2 <- data.frame(
  time_step = 1:n_time_steps,
  sst = 15 + 0.05 * time_years, # Linear warming: 2.5°C over 50 years
  chlo = 0.5 + 0.49 * sin(2 * pi * time_years) # Chlorophyll cycles between 0.2-0.8 mg/m³
)

ggplot(data = enviro_dynamic2) +
  geom_line(aes(x = time_step, y = sst)) +
ggplot(data = enviro_dynamic2) +
  geom_line(aes(x = time_step, y = chlo))

```



```{r}
#| results: hide
out_dynamic2$model$model_runtime <- system.time(
  out_dynamic2 <- zoomss_model_Dynamic(input_params, Groups, SaveTimeSteps, enviro_dynamic2)
)

```


```{r}
(zPlot_SizeSpectra(out_static) + zPlot_SizeSpectra(out_dynamic2)) /
  patchwork::guide_area() + patchwork::plot_layout(guides = "collect") & 
  theme(
    legend.position = "bottom",  # Move the legend to the bottom
    legend.box = "horizontal"    # Arrange legend items horizontally
  ) &
  guides(
    color = guide_legend(nrow = 3) # Set the number of rows for the color legend
  )
  
```

```{r}

zPlot_AbundTimeSeries(out_static) / zPlot_AbundTimeSeries(out_dynamic2) / patchwork::guide_area() + patchwork::plot_layout(guides = "collect") & 
  theme(
    legend.position = "bottom",  # Move the legend to the bottom
    legend.box = "horizontal"    # Arrange legend items horizontally
  ) &
  guides(
    color = guide_legend(nrow = 3) # Set the number of rows for the color legend
  )

```


## Example 3: Static sst with linearly increasing chlorophyll cycle
```{r}

enviro_dynamic3 <- data.frame(
  time_step = 1:n_time_steps,
  sst = 15,
  chlo = 0.1 + 0.02 * time_years # Linear Chlorophyll cycles
)

ggplot(data = enviro_dynamic3) +
  geom_line(aes(x = time_step, y = sst)) +
ggplot(data = enviro_dynamic3) +
  geom_line(aes(x = time_step, y = chlo))

```



```{r}
#| results: hide

out_dynamic3$model$model_runtime <- system.time(
  out_dynamic3 <- zoomss_model_Dynamic(input_params, Groups, SaveTimeSteps, enviro_dynamic3)
)

```


```{r}

(zPlot_SizeSpectra(out_dynamic) + zPlot_SizeSpectra(out_dynamic3)) /
  patchwork::guide_area() + patchwork::plot_layout(guides = "collect") & 
  theme(
    legend.position = "bottom",  # Move the legend to the bottom
    legend.box = "horizontal"    # Arrange legend items horizontally
  ) &
  guides(
    color = guide_legend(nrow = 3) # Set the number of rows for the color legend
  )


```

```{r}

zPlot_AbundTimeSeries(out_dynamic) / zPlot_AbundTimeSeries(out_dynamic3) /
  patchwork::guide_area() + patchwork::plot_layout(guides = "collect") & 
  theme(
    legend.position = "bottom",  # Move the legend to the bottom
    legend.box = "horizontal"    # Arrange legend items horizontally
  ) &
  guides(
    color = guide_legend(nrow = 3) # Set the number of rows for the color legend
  )

```

```{r}

zPlot_GrowthTimeSeries(out_dynamic) / zPlot_GrowthTimeSeries(out_dynamic3) /
  patchwork::guide_area() + patchwork::plot_layout(guides = "collect") & 
  theme(
    legend.position = "bottom",  # Move the legend to the bottom
    legend.box = "horizontal"    # Arrange legend items horizontally
  ) &
  guides(
    color = guide_legend(nrow = 3) # Set the number of rows for the color legend
  )
```


## Example 4: Static sst and chlo with seasonal chlorophyll cycle in 2nd half

```{r}
enviro_dynamic4 <- data.frame(
  time_step = 1:n_time_steps,
  sst = 15,
  chlo = 0.5
)

enviro_dynamic4$chlo[2501:5000] <- 0.5 + 0.3 * sin(2 * pi * time_years[2501:5000]) # Static then Chlorophyll cycles

ggplot(data = enviro_dynamic4) +
  geom_line(aes(x = time_step, y = sst)) +
ggplot(data = enviro_dynamic4) +
  geom_line(aes(x = time_step, y = chlo))

```



```{r}
#| results: hide

out_dynamic4$model$model_runtime <- system.time(
  out_dynamic4 <- zoomss_model_Dynamic(input_params, Groups, SaveTimeSteps, enviro_dynamic4)
)

```


```{r}

(zPlot_SizeSpectra(out_dynamic) + zPlot_SizeSpectra(out_dynamic4)) /
  patchwork::guide_area() + patchwork::plot_layout(guides = "collect") & 
  theme(
    legend.position = "bottom",  # Move the legend to the bottom
    legend.box = "horizontal"    # Arrange legend items horizontally
  ) &
  guides(
    color = guide_legend(nrow = 3) # Set the number of rows for the color legend
  )

```

```{r}

zPlot_AbundTimeSeries(out_dynamic) / zPlot_AbundTimeSeries(out_dynamic4) /
  patchwork::guide_area() + patchwork::plot_layout(guides = "collect") & 
  theme(
    legend.position = "bottom",  # Move the legend to the bottom
    legend.box = "horizontal"    # Arrange legend items horizontally
  ) &
  guides(
    color = guide_legend(nrow = 3) # Set the number of rows for the color legend
  )
```

```{r}

zPlot_GrowthTimeSeries(out_dynamic) / zPlot_GrowthTimeSeries(out_dynamic4) /
  patchwork::guide_area() + patchwork::plot_layout(guides = "collect") & 
  theme(
    legend.position = "bottom",  # Move the legend to the bottom
    legend.box = "horizontal"    # Arrange legend items horizontally
  ) &
  guides(
    color = guide_legend(nrow = 3) # Set the number of rows for the color legend
  )
```

Compare run times

```{r}
out_static$model$model_runtime

out_dynamic$model$model_runtime

out_dynamic2$model$model_runtime

out_dynamic3$model$model_runtime

out_dynamic4$model$model_runtime

```
